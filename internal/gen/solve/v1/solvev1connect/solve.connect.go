//***************************************************************************************************************
//	@author		Michael Roberts <michael@observerly.com>
//	@package	@observerly/nova/proto/solve/v1
//	@license	Copyright Â© 2021-2025 observerly
//***************************************************************************************************************

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: solve/v1/solve.proto

//***************************************************************************************************************

package solvev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	v1 "nova/internal/gen/solve/v1"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SolveServiceName is the fully-qualified name of the SolveService service.
	SolveServiceName = "solve.v1.SolveService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SolveServiceSolveForWCSFITSHandlerProcedure is the fully-qualified name of the SolveService's
	// SolveForWCSFITSHandler RPC.
	SolveServiceSolveForWCSFITSHandlerProcedure = "/solve.v1.SolveService/SolveForWCSFITSHandler"
)

// SolveServiceClient is a client for the solve.v1.SolveService service.
type SolveServiceClient interface {
	SolveForWCSFITSHandler(context.Context, *connect.Request[v1.SolveForWCSFITSHandlerRequest]) (*connect.Response[v1.SolveForWCSFITSHandlerResponse], error)
}

// NewSolveServiceClient constructs a client for the solve.v1.SolveService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSolveServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SolveServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	solveServiceMethods := v1.File_solve_v1_solve_proto.Services().ByName("SolveService").Methods()
	return &solveServiceClient{
		solveForWCSFITSHandler: connect.NewClient[v1.SolveForWCSFITSHandlerRequest, v1.SolveForWCSFITSHandlerResponse](
			httpClient,
			baseURL+SolveServiceSolveForWCSFITSHandlerProcedure,
			connect.WithSchema(solveServiceMethods.ByName("SolveForWCSFITSHandler")),
			connect.WithClientOptions(opts...),
		),
	}
}

// solveServiceClient implements SolveServiceClient.
type solveServiceClient struct {
	solveForWCSFITSHandler *connect.Client[v1.SolveForWCSFITSHandlerRequest, v1.SolveForWCSFITSHandlerResponse]
}

// SolveForWCSFITSHandler calls solve.v1.SolveService.SolveForWCSFITSHandler.
func (c *solveServiceClient) SolveForWCSFITSHandler(ctx context.Context, req *connect.Request[v1.SolveForWCSFITSHandlerRequest]) (*connect.Response[v1.SolveForWCSFITSHandlerResponse], error) {
	return c.solveForWCSFITSHandler.CallUnary(ctx, req)
}

// SolveServiceHandler is an implementation of the solve.v1.SolveService service.
type SolveServiceHandler interface {
	SolveForWCSFITSHandler(context.Context, *connect.Request[v1.SolveForWCSFITSHandlerRequest]) (*connect.Response[v1.SolveForWCSFITSHandlerResponse], error)
}

// NewSolveServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSolveServiceHandler(svc SolveServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	solveServiceMethods := v1.File_solve_v1_solve_proto.Services().ByName("SolveService").Methods()
	solveServiceSolveForWCSFITSHandlerHandler := connect.NewUnaryHandler(
		SolveServiceSolveForWCSFITSHandlerProcedure,
		svc.SolveForWCSFITSHandler,
		connect.WithSchema(solveServiceMethods.ByName("SolveForWCSFITSHandler")),
		connect.WithHandlerOptions(opts...),
	)
	return "/solve.v1.SolveService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SolveServiceSolveForWCSFITSHandlerProcedure:
			solveServiceSolveForWCSFITSHandlerHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSolveServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSolveServiceHandler struct{}

func (UnimplementedSolveServiceHandler) SolveForWCSFITSHandler(context.Context, *connect.Request[v1.SolveForWCSFITSHandlerRequest]) (*connect.Response[v1.SolveForWCSFITSHandlerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("solve.v1.SolveService.SolveForWCSFITSHandler is not implemented"))
}
